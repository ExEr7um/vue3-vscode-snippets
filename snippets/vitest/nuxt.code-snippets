{
  "Vitest Nuxt Mount Suspended": {
    "prefix": "vimount-suspended",
    "body": [
      "const wrapper = await mountSuspended(${0})",
    ],
    "description": "nuxt-vitest mountSuspended"
  },
  "Vitest Nuxt Mock Import": {
    "prefix": "vimocknuxtimport",
    "body": [
      "mockNuxtImport('${1:functionName}', () => {",
      "\treturn () => {",
      "\t\treturn { ${0} }",
      "\t}",
      "})"
    ],
    "description": "nuxt-vitest mockNuxtImport"
  },
  "Vitest Nuxt Mock Component": {
    "prefix": "vimockcomponent",
    "body": [
      "mockComponent('${0}')",
    ],
    "description": "nuxt-vitest mockComponent"
  },
  "Vitest Nuxt Register Endpoint": {
    "prefix": "viregisterendpoint",
    "body": [
      "registerEndpoint('/${1:endpoint}/', () => {",
      "\t{0}",
      "})"
    ],
    "description": "nuxt-vitest registerEndpoint"
  },
  "Vitest Nuxt Base": {
    "prefix": "vibase-nuxt",
    "body": [
      "// @vitest-environment nuxt",
      "import type { VueWrapper } from '@vue/test-utils'",
      "import { mountSuspended } from '@nuxt/test-utils/runtime'",
      "import { afterEach, beforeEach, describe, expect } from 'vitest'",
      "import ${TM_FILENAME/\\..*//} from '~/components/${TM_FILENAME/\\..*//}.vue'",
      "",
      "describe('${TM_FILENAME/\\..*//}', () => {",
      "\tlet wrapper: VueWrapper",
      "\t",
      "\tbeforeEach(async () => {",
      "\t\twrapper = await mountSuspended(${TM_FILENAME/\\..*//})",
      "\t})",
      "\t",
      "\tafterEach(() => {",
      "\t\twrapper.unmount()",
      "\t})",
      "})"
    ],
    "description": "Base for Vitest file for Vue component"
  }
}
